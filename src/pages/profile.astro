---
// filepath: src/pages/profile.astro
import Layout from "../layouts/Navbar.astro";
import { UserProfile } from "@/components/react/UserProfile";
import { FriendRequestsList } from "@/components/react/FriendRequestsLists";
import { FriendsList } from "@/components/react/FriendsList";
import { AddFriend } from "@/components/react/AddFriend";  // import the AddFriend component
import { app } from "../firebase/server"

import { getFirestore } from "firebase-admin/firestore";
import { getAuth } from "firebase-admin/auth";

let userData = null;
let friendRequestsIds: string[] = [];
let friends: string[] = [];
interface FriendRequest {
  uid: string;
  displayName: string;
  photoURL: string;
  timestamp: {
    toDate: () => Date;
    seconds: number;
    nanoseconds: number;
  };
}

let friendRequestsWithDetails: FriendRequest[] = [];

const user = await Astro.locals.user;
const db = getFirestore(app);
const auth = getAuth(app);

if (user) {
  userData = {
    uid: user.uid,
    displayName: user.displayName || "",
    email: user.email || "",
    photoURL: user.photoURL || `https://api.dicebear.com/7.x/initials/svg?seed=${user.displayName || user.email}`,
    bio: "",
    location: "",
    website: "",
  };

  //additional fields from userdoc that i will add in future
  const userDoc = await db.collection("users").doc(user.uid).get();
  if (userDoc.exists) {
    const data = userDoc.data();
    userData = {
      ...userData,
      bio: data.bio || "",
      location: data.location || "",
      website: data.website || "",
    };
  }

  // Get friend request IDs and friends IDs
  const requestStatusDoc = await db.collection("users").doc(user.uid).collection("friends").doc("request-status").get();
  if (requestStatusDoc.exists) {
    const requestData = requestStatusDoc.data();
    friendRequestsIds = requestData?.pendingRequests || [];
    friends = requestData?.acceptedRequests || [];
  }

  // Retrieve Friend Requests (assumes a subcollection "friendRequests")
  if (friendRequestsIds.length > 0) {
    friendRequestsWithDetails = await Promise.all(
      friendRequestsIds.map(async (requesterId) => {
        try {
          // Try to get user from Auth
          const requester = await auth.getUser(requesterId);

          const timestamp = {
            toDate: () => new Date(),
            seconds: Math.floor(Date.now() / 1000),
            nanoseconds: 0
          };
          return {
            uid: requesterId,
            displayName: requester.displayName || "User",
            photoURL: requester.photoURL || 
                     `https://api.dicebear.com/7.x/initials/svg?seed=${requester.displayName || requester.email || requesterId}`,
            timestamp: timestamp, // You might want to store this in Firestore when the request is created
          };
        } catch (error) {
          // Fallback to a default object if user details can't be fetched
          console.error(`Error fetching details for user ${requesterId}:`, error);

          const timestamp = {
            toDate: () => new Date(),
            seconds: Math.floor(Date.now() / 1000),
            nanoseconds: 0
          };

          return {
            uid: requesterId,
            displayName: "Unknown User",
            photoURL: `https://api.dicebear.com/7.x/initials/svg?seed=${requesterId}`,
            timestamp: timestamp,
          };
        }
      })
    )
  }
}
---

<Layout title="Profile">
  <div class="container mx-auto py-8 px-4 space-y-8">
    {userData ? (
      <>
        <!-- Profile Section -->
        <section>
          <h1 class="text-2xl font-bold text-white mb-4">Your Profile</h1>
          <UserProfile client:load userData={userData} />
        </section>

        <!-- Friends List Section with Add Friend Button -->
        <section>
          
          <div class="flex flex-col gap-4">
            <div class="w-full">
              <AddFriend client:load userId={userData.uid} />
            </div>
            <!-- Right Column: Friends List -->
            <h2 class="text-xl font-bold text-white mb-4">Your Friends</h2>
            <div class="w-full">
              {friends.length > 0 ? (
                <FriendsList client:load friends={friends} userId={userData.uid} />
              ) : (
                <p class="text-gray-400">You haven't added any friends yet.</p>
              )}
            </div>
            
          </div>
        </section>

        <!-- Friend Requests Section -->
        <section>
          <h2 class="text-xl font-bold text-white mb-4">Friend Requests</h2>
          {friendRequestsWithDetails.length > 0 ? (
            <FriendRequestsList client:load requests={friendRequestsWithDetails} userId={userData.uid} />
          ) : (
            <p class="text-gray-400">No pending friend requests.</p>
          )}
        </section>
      </>
    ) : (
      <p class="text-gray-400">Loading profile...</p>
    )}
  </div>
</Layout>