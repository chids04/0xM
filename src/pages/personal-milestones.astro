---
import Layout from "../layouts/Navbar.astro";  // Use the Navbar layout
import MilestoneTimeline from "@/components/react/PersonalMilestones";

const user = await Astro.locals.user
---

<Layout title = "Shared Milestones" user={user}>
<MilestoneTimeline client:visible userId={user.uid} userName={user.displayName}></MilestoneTimeline>
</Layout>

<script>

</script>
<!-- <script>
    document.addEventListener('DOMContentLoaded', () => {
        const milestones = document.querySelectorAll('.milestone-card');
        const container = document.querySelector('.milestone-container');
        const totalMilestones = milestones.length;
        
        // Function to update positions based on window width
        const updatePositions = () => {
            // Get container dimensions
            const containerWidth = container.clientWidth;
            const containerHeight = container.clientHeight;
            
            // Calculate responsive amplitude based on screen width
            const maxAmplitude = containerWidth * 0.3; // 30% of container width for wide screens
            const amplitude = Math.min(
                maxAmplitude,
                Math.max(20, (window.innerWidth - 480) / 4) // Gradually reduces amplitude as width decreases
            );
            
            // Calculate space needed for each card and spacing
            const cardHeight = 180; // Approximate height of a card
            const totalSpacing = containerHeight - (cardHeight * totalMilestones);
            const spaceBetweenCards = totalSpacing / (totalMilestones + 1);
            
            // Position each milestone
            milestones.forEach((milestone, i) => {
                const index = parseInt(milestone.getAttribute('data-index'));
                
                // Vertical position - calculate actual pixel position
                // Add cardHeight/2 to account for the card being positioned from its top
                const verticalPixels = spaceBetweenCards * (index + 1) + cardHeight * index + cardHeight/2;
                
                // Calculate position in the sine wave cycle (0 to 2Ï€)
                // We'll use 1.5 full cycles for 7 milestones
                const sinePosition = (index / (totalMilestones - 1)) * Math.PI * 3;
                
                // Horizontal position based on sine wave
                const horizontalOffset = Math.sin(sinePosition) * amplitude;
                const horizontalPos = 0.5 + horizontalOffset / containerWidth; // Center is 0.5
                
                // Apply positions
                milestone.style.top = `${verticalPixels}px`;
                milestone.style.left = `${horizontalPos * 100}%`;
            });
        };
        
        // Initial positioning
        updatePositions();
        
        // Update positions when window is resized
        window.addEventListener('resize', updatePositions);
    });
</script> -->
