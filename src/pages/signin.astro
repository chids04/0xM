---
import { app } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";
import Layout from "../layouts/Layout.astro";
import { ProfileForm } from "@/components/react/LoginForm"

import fbLogo from "../assets/login_icons/facebook.png";
import googleLogo from "../assets/login_icons/google.png";
import appleLogo from "../assets/login_icons/apple.png";

//this for auto sign in, if there is still a valid session in the browser, should add option for this
const auth = getAuth(app);
const sessionCookie = Astro.cookies.get("__session")?.value;

if(sessionCookie){
  try{
    const decodedCookie = await auth.verifySessionCookie(sessionCookie);
    return Astro.redirect("/profile");
  }
  catch (error) {
    // If verification fails, allow the page to render.
  }
}
---

<Layout title="Sign in">
 
    <div class="min-h-screen flex items-center justify-center bg-[#0e0e0e]">
      <div class="w-full max-w-md p-8 space-y-8 bg-[#1f1f1f] rounded-lg shadow-lg">
        <h1 class="text-center text-white font-bold mb-2 text-2xl">Sign In</h1>

        <p class="text-center text-gray-300">
        or <a href="/register" class="text-gray-500 hover:underline">register here</a>
        </p>

        <ProfileForm client:visible/>
        
        <div class="mt-6">
          <div class="flex items-center">
            <!-- Left divider -->
            <div class="flex-grow border-t border-[#141313]"></div>
            <!-- Separator text -->
            <span class="mx-2 text-gray-300">or continue with</span>
            <!-- Right divider -->
            <div class="flex-grow border-t border-[#141313]"></div>
          </div>
          <div class="mt-4 space-y-4 flex flex-col items-center">
            <!-- Google Sign In -->
            <button id="google" class="">
              <img src={googleLogo.src} alt="Google" class="mx-auto" />
            </button>
            <!-- Facebook Sign In -->
            <button id="facebook" class="">
              <img src={fbLogo.src} alt="Facebook" class="mx-auto" />
            </button>
          </div>
        </div>

      </div>
    </div>
</Layout>

<script>
  import {
    getAuth,
    inMemoryPersistence,
    signInWithEmailAndPassword,
    GoogleAuthProvider,
    FacebookAuthProvider,
    signInWithPopup,
    getAdditionalUserInfo
  } from "firebase/auth";
  
  import { app } from "../firebase/client";
  
  const authClient = getAuth(app);
  // Prevent session persistence (for demo purpose)
  authClient.setPersistence(inMemoryPersistence);
  
  
  const gSignIn = document.querySelector("#google");
  if(gSignIn){
    gSignIn.addEventListener("click", async () => {
      const provider = new GoogleAuthProvider();
      try {
        const userCredential = await signInWithPopup(authClient, provider);
        const idToken = await userCredential.user.getIdToken();
        const isNewUser = getAdditionalUserInfo(userCredential)?.isNewUser;
  
        const res = await fetch("/api/auth/signin", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${idToken}`
          },
          body: JSON.stringify({ isNewUser }),
        });
  
        if (res.redirected) {
          window.location.assign(res.url);
        }
        else{
          const errorMessage = await res.json();
          alert("internal server error: " + errorMessage.message);
        }
      } catch (error) {
        alert("internal server error: " + error);
      }
    });
  }
  
  const fSignIn = document.querySelector("#facebook");
  if(fSignIn){
    fSignIn.addEventListener("click", async () => {
      const provider = new FacebookAuthProvider();
      try {
        const userCredential = await signInWithPopup(authClient, provider);
        const idToken = await userCredential.user.getIdToken();
        const isNewUser = getAdditionalUserInfo(userCredential)?.isNewUser;
  
        const res = await fetch("/api/auth/signin", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${idToken}`
          },
          body: JSON.stringify({ isNewUser }),
        });
  
        if (res.redirected) {
          window.location.assign(res.url);
        }
        else{
          const errorMessage = await res.json();
          alert("internal server error: " + errorMessage.message);
        }
      } catch (error) {
        alert("internal server error: " + error);
      }
    });
  }
</script>
